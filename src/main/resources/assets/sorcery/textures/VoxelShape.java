Stream.of(
Block.makeCuboidShape(6, 3, 6, 10, 4, 10),
Block.makeCuboidShape(2.3, 10, 6, 3.3, 14, 7),
Block.makeCuboidShape(4, 7, 4, 12, 8, 12),
Block.makeCuboidShape(5, 2, 5, 6, 4, 6),
Block.makeCuboidShape(4, 0, 11, 5, 3, 12),
Block.makeCuboidShape(5, 2, 10, 6, 4, 11),
Block.makeCuboidShape(10, 2, 5, 11, 4, 6),
Block.makeCuboidShape(4, 0, 4, 5, 3, 5),
Block.makeCuboidShape(10, 2, 10, 11, 4, 11),
Block.makeCuboidShape(11, 0, 4, 12, 3, 5),
Block.makeCuboidShape(11, 0, 11, 12, 3, 12),
Block.makeCuboidShape(4, 6, 12, 12, 9, 13),
Block.makeCuboidShape(4, 6, 3, 12, 9, 4),
Block.makeCuboidShape(3, 6, 4, 4, 9, 12),
Block.makeCuboidShape(12, 6, 4, 13, 9, 12),
Block.makeCuboidShape(11, 5, 6, 13, 6, 10),
Block.makeCuboidShape(3, 5, 6, 5, 6, 10),
Block.makeCuboidShape(4, 5, 10, 6, 7, 12),
Block.makeCuboidShape(10, 5, 10, 12, 7, 12),
Block.makeCuboidShape(10, 5, 4, 12, 7, 6),
Block.makeCuboidShape(4, 5, 4, 6, 7, 6),
Block.makeCuboidShape(6, 4, 4, 10, 6, 5),
Block.makeCuboidShape(6, 4, 11, 10, 6, 12),
Block.makeCuboidShape(5, 4, 10, 11, 5, 11),
Block.makeCuboidShape(5, 4, 5, 11, 5, 6),
Block.makeCuboidShape(10, 4, 6, 12, 5, 10),
Block.makeCuboidShape(4, 4, 6, 6, 5, 10)
).reduce((v1, v2) -> {return VoxelShapes.combineAndSimplify(v1, v2, IBooleanFunction.OR);});